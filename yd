#!/bin/sh

VERBOSE=1
DEST_DIR="${DEST_DIR:-$HOME}"
BIN_URL=https://github.com/yt-dlp/yt-dlp/releases/latest/download/yt-dlp
BIN_DIR="$HOME"/.local/bin
BIN="$BIN_DIR"/yt-dlp
YT_URL=
IS_PLAYLIST=
A_OR_V=
USE_THUMBNAIL=
COVER_URL=

die() {
	echo "$@" >&2
	exit 1
}

run() {
	[ "$VERBOSE" -eq 1 ] && echo "$@" >&2
	"$@" || exit 1
}

check_deps() {
	[ -x "$(command -v curl)" ] \
		&& [ -x "$(command -v python)" ] \
		&& [ -x "$(command -v ffmpeg)" ] \
		&& return
	die "Install curl, python, and ffmpeg first"
}

setup_wd() {
	wd="$(run mktemp -d)"
	run cd "$wd"
}

install_ytdl_if_needed() {
	[ -x "$(command -v "$BIN")" ] && return
	echo "Downloading $BIN_URL to $BIN"
	run mkdir -p "$BIN_DIR"
	run curl -L "$BIN_URL" -o "$BIN"
	run chmod a+rx "$BIN"
}

ask_yt_url() {
	while [ -z "$YT_URL" ]; do
		printf "URL: "
		read -r YT_URL
	done
	case "$YT_URL" in
		*/playlist*) IS_PLAYLIST=1;;
		*) IS_PLAYLIST=0;;
	esac
}

ask_audio_or_video() {
	while [ -z "$A_OR_V" ]; do
		printf "[a]udio or [v]ideo? "
		read -r resp
		case "$resp" in
			[aA]*) A_OR_V=a;;
			[vV]*) A_OR_V=v;;
		esac
	done
}

ask_use_thumbnail() {
	[ "$A_OR_V" = v ] && USE_THUMBNAIL=0 && return
	printf "Use thumbnail as cover? [n] "
	read -r resp
	case "$resp" in
		[yY]*) USE_THUMBNAIL=1;;
		*) USE_THUMBNAIL=0;;
	esac
}

ask_cover_url() {
	[ "$A_OR_V" = v ] || [ "$USE_THUMBNAIL" -eq 1 ] && return
	printf "Cover URL (empty to skip): "
	read -r COVER_URL
}

run_ytdl() {
	cmd="python $BIN --restrict-filenames --add-metadata"
	[ "$A_OR_V" = a ] && cmd="$cmd -x --audio-format mp3"
	[ "$USE_THUMBNAIL" -eq 1 ] && cmd="$cmd --embed-thumbnail"
	if [ "$IS_PLAYLIST" -eq 1 ]; then
		cmd="$cmd -o '%(playlist)s/%(playlist_index)s-%(title)s.%(ext)s'"
	else
		cmd="$cmd --no-playlist -o '%(title)s.%(ext)s'"
	fi
	cmd="$cmd '$YT_URL'"
	run eval "$cmd"
}

for_each_downloaded() {
	callback="$1"
	for f in $(run find . -type f); do
		"$callback" "$f"
	done
}


set_cover() {
	[ -z "$COVER_URL" ] && return

	file="$1"
	ext="${file##*.}"
	tmpf="$(run mktemp -u)"
	cf=cover

	run curl -L -o "$cf" "$COVER_URL"

	run ffmpeg -hide_banner -v warning \
		-i "$file" -i "$cf" \
		-map 0:0 -map 1:0 \
		-c copy -id3v2_version 3 \
		-metadata:s:v title=cover \
		-metadata:s:v comment='Cover (front)' \
		-f "$ext" \
		"$tmpf"

	run mv "$tmpf" "$file"
	run rm "$cf"
}

edit_metadata() {
	file="$1"
	ext="${file##*.}"
	tmpf="$(run mktemp -u)"
	mf=metadata.txt

	run ffmpeg -hide_banner -v error -i "$file" -f ffmetadata "$mf"

	run "${EDITOR:-vi}" "$mf"

	run ffmpeg -hide_banner -v warning \
		-i "$file" -i "$mf" \
		-map_metadata 1 -c copy \
		-f "$ext" \
		"$tmpf"

	run mv "$tmpf" "$file"
	run rm "$mf"
}

move_to_dest() {
	run mkdir -p "$DEST_DIR"
	run mv -i ./* "$DEST_DIR"
}

check_deps
setup_wd
install_ytdl_if_needed
ask_yt_url
ask_audio_or_video
ask_use_thumbnail
ask_cover_url
run_ytdl
for_each_downloaded set_cover
for_each_downloaded edit_metadata
move_to_dest
